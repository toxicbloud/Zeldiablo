@startuml
title zeldiablo version 4

class Jeu{
    - carte : Labyrinthe
    - joueur : Aventurier
    - cam : Camera
    - ennemis : ArrayList<Entite>

    + Jeu(String)
    + getCarte() : Labyrinthe
    + getJoueur() : Aventurier
    + getCam() : Camera
    + getEnnemis() : ArrayList<Entite>
}

abstract class Case{
    - traversable : boolean
    - sprite: Image

    + Case()
    + Case(boolean, Image)
    + isTraversable() : boolean
    + getSprite(): Image
}

class Chemin{
    + Chemin()
}

class Mur{
    + Mur()
}

class Amulette{
    + Amulette()
}

class Labyrinthe {
    + TILE_SIZE : int
    - size : int
    - cases : Case[][]
    - entree : Vec2

    + Labyrinthe()
    + Labyrinthe(s: int)
    - createLab()
    - generateLab()
    + getCaseAtVec2(pos: Vec2): Case
    + getSize(): int
    + getCases(): Case[][]
    + setCases(Case[][])
    + getEntree(): Vec2
    + setEntree(entree: Vec2)
}

class Vec2 {
    + x : int
    + y : int

    + Vec2()
    + Vec2(int, int)
    + plus(Vec2): Vec2
    + minus(Vec2): Vec2
    + times(Vec2): Vec2
    + div(Vec2): Vec2
    + equals(Vec2): boolean
    + isZero() : boolean
    + toString(): String
}

abstract class Entite{
    - nom : String
    - pos : Vec2
    - taille : Vec2
    - pv : int
    - mort: boolean
    - laby: Labyrinthe

    + Entite(String, Vec2, int, Labyrinthe)
    + Entite(String, Vec2, int, Labyrinthe, Vec2)
    + getPos() : Vec2
    + setPos(Vec2)
    + getNom() : String
    + setNom(String)
    + getPV() : int
    + setPV(int)
    + etreMort(): boolean
    + gagnerPV(int) 
    + perdrePV(int)
    + attaquerAutre(Entite, int)
    + soigner(Entite, int)
    + getLabyrinthe() : Labyrinthe
    + getTaille() : Vec2
    + setTaille(Vec2)
    + deplacer(Commande)
}

abstract Monstre{
    - degat : int
    - vitesse : int
    - description : String
    - attente : int

    + Monstre(String, Vec2, int, int, String, Labyrinthe, int, int)
    + soigner(int, Entite) : void
    + getDegat() : int
    + setDegat(int)
    + getDescription() : String
    + deplacer()
}

class Gobelin{
    + Gobelin(int, int, Vec2, Labyrinthe)
}

class Fantome{
    + Fantome(int, int, Vec2, Labyrinthe)
}

class Orc{
    + Orc(int, int, Vec2, Labyrinthe)
}

class Murloc{
    + Murloc(int, int, Vec2, Labyrinthe)
}

class PlanteC{
    + PlanteC(int, int, Vec2, Labyrinthe)
}

class Aventurier{
    + Aventurier(String, Vec2, int, Labyrinthe)
    + equiper_Arme(Arme)
    + jeter_Arme()
    + getArme() : Arme
}

class DessinJeu{
    - TITLE_SIZE : int
    - jeu : Jeu

    + DessinJeu()
    + getJeu() : Jeu
    + setJeu(Jeu)
}

class Main{
    + main(args: String[])
}

interface MoteurJeu.DessinJeu{
    + dessine(BufferedImage) : void
}

interface MoteurJeu.Jeu{
    + evoluer(Commande) : void
    + etreFini() : boolean
}


class Camera {
    - pos : Vec2
    - i : int
    - target : Entite

    + Camera(Entite)
    + deplacer(Entite)
    + getPos : Vec2
    + setPos(Vec2)
    + getTarget() : Entite
    + setTarget(Entite)
}

class Textures {
    + carte_mur: Image
    + carte_chemin: Image
    + entite_aventurier: Image
    + entite_gobelin: Image
}

abstract class Arme{
    - degats : int
    - vitesse : int

    + Arme(Entite)
    + attaquer(Entite)
    + getDegats() : int
    + setDegats(int)
    + getVitesse() : int
    + setVitesse(int)
}

class Arme_distance{
    - range : int
    - munitions : int

    + Arme_distance(int, int, int)
    + chargerArme()
}

class Arme_COC {
    - energie : int

    + Arme_COC(int, int)
    + getEnergie() : int
    + setEnergie(int)
}
class Projectil{
    - origine : Arme
    - vitesse : int
    - direction : Commande

    + Vec2[] parcours_Bullet()
}


Labyrinthe "1" --> "*" Case : - cases
Chemin -|> Case
Mur -|> Case
Amulette -|> Case
Jeu -|> MoteurJeu.Jeu
DessinJeu -|> MoteurJeu.DessinJeu
Aventurier -|> Entite
Monstre -|> Entite
Gobelin -|> Monstre
Fantome -|> Monstre
Orc -|> Monstre
Murloc -|> Monstre
PlanteC -|> Monstre
Arme_distance -|> Arme
Arme_COC -|> Arme
Jeu "1" --> "1" Labyrinthe : - carte
Jeu "1" --> "1" Aventurier : - joueur
DessinJeu "1" --> "1" Jeu : - jeu
Camera "1" --> "1" Entite : - target
Camera "1" --> "1" Vec2 : - pos
Entite "1" --> "1" Vec2 : - pos
Entite "1" --> "1" Vec2 : - taille
@enduml