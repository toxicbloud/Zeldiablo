@startuml
title zeldiablo version_3

class Jeu{

    + Jeu(String)
    + getCarte() : Labyrinthe
    + getJoueur() : Aventurier
}

abstract class Case{
    - traversable : boolean
    + Case()
    + Case(boolean)
    + isTraversable() : boolean
}

class Chemin{

    + Chemin()
}

class Mur{

    + Mur()
}

class Labyrinthe {
    + TILE_SIZE
    - size
    - cases
    - entree
    --
    + Labyrinthe()
    + Labyrinthe(s: int)
    - createLab()
    + dessiner(image: BufferedImage)
    + getSize(): int
    + getCases(): Case[][]
    + getEntree(): Vec2
    + setEntree(entree: Vec2)
    + getCaseAtVec2(pos: Vec2)
}

class Vec2 {
    + x
    + y
    --
    + Vec2()
    + Vec2(: int, y: int)
    + plus(v: Vec2): Vec2
    + minus(v: Vec2): Vec2
    + times(v: Vec2): Vec2
    + div(v: Vec2): Vec2
    + equals(v: Vec2): boolean
    + isZero() : boolean
    + toString(): String
}



abstract class Entite{

    - nom : String
    - x : int
    - y : int
    - pv : int

    + Entite(String)
    + getNom() : String
    + setNom(String)
    + getX() : int
    + setX(int) : void
    + getY() : int
    + setY(int) : void
    + etreMort(): boolean
    + seSoigner(int) : void
    + attaquer(Entite) : void
    + subirDegats(int) : void

}

abstract Monstre{
    - degat : int
    - description : String

}

class Gobelin{

    Gobelin(int, int, String)
}

class Aventurier{
    + Aventurier(String)
}

class DessinJeu{
    - jeu : Jeu
}

class Main{
    --
    + main(args: String[])
}

interface MoteurJeu.DessinJeu{
    + dessine(BufferedImage) : void
}

interface MoteurJeu.Jeu{
    + evoluer(Commande) : void
    + etreFini() : boolean
}


Labyrinthe "1" --> "*" Case : - cases
Chemin -|> Case
Mur -|> Case
Jeu -|> MoteurJeu.Jeu
DessinJeu -|> MoteurJeu.DessinJeu
Aventurier -|> Entite
Monstre -|> Entite
Gobelin -|> Monstre
Jeu "1" --> "1" Labyrinthe : - carte
Jeu "1" --> "1" Aventurier : - joueur
DessinJeu "1" --> "1" Jeu : - jeu
@enduml